package gov.ca.cwds.jenkins

import spock.lang.Specification

class SmokeTesterSpecification extends Specification {

class PipeLineScript {
    PipeLineScript() {
    }

    def sh(String script) {
      actualValues.calledShScripts.add(script)
      return behaviour && behaviour.sh ? behaviour.sh[script] : 1
    }

    def sh(Map params) {
      return this.sh(params.script)
    }

    def echo(String msg) {
      actualValues.echoedMessages.add(msg)
    }

    def readFile(Map params) {
      return behaviour.readFileResult
    }

    def writeFile(Map params) {
      actualValues.textPassedToWriteFile = params.text
    }

  }

  def behaviour = [
    sh: [:], // map of script -> result values where script is a parameter of the pipeline.sh() method
    readFileResult: ''
  ]

  def actualValues = [
    calledShScripts            : [] as Set,
    echoedMessages             : [] as Set,
    textPassedToWriteFile      : null,
    usedCredentialsId          : null,
    lastGradleRuntimeParameters: null
  ]

  static def getSshGitCommand(gitCommand) {
    'GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ' + gitCommand
  }

  final static def SSH_GIT_CONFIG_USER = getSshGitCommand('git config --global user.name Jenkins')
  final static def SSH_GIT_CONFIG_EMAIL = getSshGitCommand('git config --global user.email cwdsdoeteam@osi.ca.gov')
  final static def SSH_GIT_ADD_LEGAL = getSshGitCommand('git add legal')
  final static def SSH_GIT_COMMIT = getSshGitCommand('git commit -m "updated license info"')
  final static def SSH_GIT_PUSH = getSshGitCommand('git push --set-upstream origin master')

  def setUpGitSshCommands() {
    behaviour.sh[SSH_GIT_CONFIG_USER] = 0
    behaviour.sh[SSH_GIT_CONFIG_EMAIL] = 0
    behaviour.sh[SSH_GIT_ADD_LEGAL] = 0
    behaviour.sh[SSH_GIT_COMMIT] = 0
    behaviour.sh[SSH_GIT_PUSH] = 0
  }

  // assertion methods

  def isLastShScriptCalled(expectedShScript) {
    expectedShScript == actualValues.calledShScripts.last()
  }

  def areShScriptsCalled(Set expectedShScripts) {
    expectedShScripts == actualValues.calledShScripts
  }

  def isMessageEchoed(expectedMessage) {
    actualValues.echoedMessages.contains(expectedMessage)
  }

  def isTextPassedToWriteFile(expectedText) {
    expectedText == actualValues.textPassedToWriteFile
  }

  def isCredentialsIdUsed(expectedCredentialsId) {
    expectedCredentialsId == actualValues.usedCredentialsId
  }

  def areLastGradleRuntimeParameters(expectedParameters) {
    expectedParameters == actualValues.lastGradleRuntimeParameters
  }

  // test methods
  class PipeLineScript1 {

    def error(hash) {}

    def sh(hash) { }
    
    def echo(hash) { }

    def PipeLineScript1() {}
  }

  def "#runSmokeTestPasses"() {

    given:
    def passed = './test/resources/smoketest/passed.sh'
    def PipeLineScript pipeline = Stub(PipeLineScript)
    pipeline.sh([script: "./test/resources/smoketest/passed.sh test", returnStatus: true]) >> "smoketest passed"
    def smokeTester = new SmokeTester(pipeline)

    when:
    def smokePassed = smokeTester.runSmokeTest(passed, "test").toString()

    then:
    smokePassed == "smoke test passed"
  }

  def "#runSmokeTestFails"() {

    given:
    def pipeline = Mock(PipeLineScript)
    def failed = './test/resources/smoketest/failed.sh'
    def smokeTester = new SmokeTester(pipeline)

    when:
    smokeTester.runSmokeTest(failed, "test")

    then:
    1 * pipeline.error(_)
  }

}
